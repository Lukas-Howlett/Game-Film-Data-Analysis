# -*- coding: utf-8 -*-
"""Project 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17D6CEkC6rL0u4BDCxV58myyZ_2sZblAr
"""

import math
from random import Random
from itertools import product

import pandas as pd
import numpy as np
import bokeh as bk
from bokeh.layouts import gridplot, column
from bokeh.plotting import figure, show, ColumnDataSource
from bokeh.models import FactorRange, Div, HoverTool, ColorBar, CheckboxGroup, Legend
from bokeh.models import CategoricalColorMapper, LogColorMapper, LinearColorMapper
from bokeh.models import BasicTicker, NumeralTickFormatter
from bokeh.io import output_notebook
from bokeh.palettes import Blues9, Oranges9, Category10_3, Pastel1_3, Spectral11, RdYlBu11
from bokeh.transform import factor_cmap

output_notebook()

df = pd.read_csv("/content/sample_data/video_game_films.csv")

df

# Remove rows with NaN values in 'Rotten Tomatoes' or 'Metacritic' columns
df_cleaned = df.dropna(subset=['Rotten Tomatoes', 'Metacritic'])

# Reset index of the rows
df_cleaned.reset_index(drop=True, inplace=True)

df_cleaned

# Create "old" and "new" classifications using 2011 as threshold year
df_cleaned['Release date'] = pd.to_datetime(df_cleaned['Release date'])

# Categorize each row as 'old' or 'new' based on the release date
df_cleaned['Category'] = df_cleaned['Release date'].apply(lambda x: 'old' if x.year < 2011 else 'new')

# Convert Release Date to year only
df_cleaned['Release date'] = df_cleaned['Release date'].dt.year
df_cleaned

# Define colors for old and new titles
colors = {'old': 'red', 'new': 'blue'}

# Create a ColumnDataSource
source = ColumnDataSource(df_cleaned)

# Create a figure
p = figure(width=800, height=600, title="INTERACTIVE GRAPH | Old vs New video game film adaptation performances (Circle area = global box office)",
           x_axis_label='Release date', y_axis_label='Rotten Tomatoes Score',
           tools="pan, wheel_zoom, box_zoom, reset, save")

r = p.x(
    x='Release date',
    y='Rotten Tomatoes',
    source = source
)

p.add_tools(HoverTool(renderers = [r], tooltips=[
    ('Title', '@Title'),
    ('Release Date', '@{Release date}'),
    ('Worldwide box office', '@{Worldwide box office}{($ 0.00 a)}')
]))

# Plot each data point individually
for index, row in df_cleaned.iterrows():
    category_color = colors[row['Category']]
    circle = p.circle(x=row['Release date'], y=row['Rotten Tomatoes'], size=row['Worldwide box office'] / 6500000, source = source,
             fill_alpha=0.6, legend_label=row['Category'], color=category_color)

# Show the plot
output_notebook()
show(p)

# Calculate sums for each distributor
distributor_sums = df_cleaned.groupby('Distributor').agg({'Worldwide box office': 'sum',
                                                          'Rotten Tomatoes': 'sum',
                                                          'Title': 'count'}).reset_index()

# Create a figure for the bar chart
bar_chart = figure(width=800, height=500, title="INTERACTIVE GRAPH | Film Distributor Stats", x_axis_label="Distributor", y_axis_label="Profit, Score, or Count",
                   x_range=distributor_sums['Distributor'], tools="save", toolbar_location=None)

distributor_sums['Worldwide box office'] = distributor_sums['Worldwide box office']/6500000

# distributor_sums

# Calculate the number of distributors
num_distributors = len(distributor_sums)

# Define the width of each bar group and the offset
bar_width = 0.25
offset = 1

# Define the x-coordinates for each group of bars
x = [i + bar_width for i in range(num_distributors)]

# Plot bars for each distributor
bar_chart.vbar(x=x, top=distributor_sums['Worldwide box office'], width=bar_width, color="green", legend_label="Worldwide Box Office", alpha=0.8)
bar_chart.vbar(x=[i + bar_width * 2 for i in range(num_distributors)], top=distributor_sums['Rotten Tomatoes'], width=bar_width, color="orange", legend_label="Rotten Tomatoes", alpha=0.8)
bar_chart.vbar(x=[i + bar_width * 3 for i in range(num_distributors)], top=distributor_sums['Title'], width=bar_width, color="gray", legend_label="Total Titles", alpha=0.8)

# Add hover tool to display bar values
hover_tooltips = [("Value", "@top")]
bar_chart.add_tools(HoverTool(tooltips=hover_tooltips, mode='vline', renderers=bar_chart.renderers))

# Customize the plot
bar_chart.xaxis.major_label_orientation = 1
bar_chart.y_range.start = 0
bar_chart.legend.location = "top_left"
bar_chart.legend.orientation = "horizontal"

# Create a grid plot
grid = gridplot([[p], [bar_chart]])

# Show the plot
show(grid)

#Create score per title column to replace total number of titles bar in bar chart
distributor_sums['Score per Title'] = distributor_sums['Rotten Tomatoes']/distributor_sums['Title']

# Sort distributor_sums DataFrame by "Worldwide box office" column in descending order
distributor_sums = distributor_sums.sort_values(by='Worldwide box office', ascending=False)

# Create a figure for the bar chart
bar_chart2 = figure(width=800, height=500, title="INTERACTIVE GRAPH | Film Distributor Stats (Descending order of Worldwide box office)", x_axis_label="Distributor", y_axis_label="Profit, Score, or Count",
                   x_range=distributor_sums['Distributor'], tools="save", toolbar_location=None)

# Plot bars for each distributor
bar_chart2.vbar(x=x, top=distributor_sums['Worldwide box office'], width=bar_width, color="green", legend_label="Worldwide Box Office", alpha=0.8)
bar_chart2.vbar(x=[i + bar_width * 2 for i in range(num_distributors)], top=distributor_sums['Rotten Tomatoes'], width=bar_width, color="orange", legend_label="Rotten Tomatoes", alpha=0.8)
bar_chart2.vbar(x=[i + bar_width * 3 for i in range(num_distributors)], top=distributor_sums['Score per Title'], width=bar_width, color="gray", legend_label="Score per # of titles", alpha=0.8)

# Add hovertool
bar_chart2.add_tools(HoverTool(tooltips=hover_tooltips, mode='vline', renderers=bar_chart2.renderers))

# Customize the plot
bar_chart2.xaxis.major_label_orientation = 1
bar_chart2.y_range.start = 0
bar_chart2.legend.location = "top_right"
bar_chart2.legend.orientation = "horizontal"

# Create a grid plot
grid2 = gridplot([[p], [bar_chart2]])

# Show the plot
show(grid2)